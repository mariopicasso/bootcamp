{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/personService.js","App.js","index.js"],"names":["Filter","handleSearchChange","newSearch","onChange","value","PersonForm","handleNameChange","addPerson","handleNumberChange","newName","newNumber","onSubmit","type","Person","person","deletePerson","name","number","onClick","id","Persons","personsToShow","map","Notification","notification","console","log","notificationStyle","color","backgroundColor","fontSize","borderStyle","borderRadius","padding","marginBottom","style","message","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","persons","setPersons","setNewName","setNewNumber","setNewSearch","setNotification","filter","toLowerCase","startsWith","useEffect","servicePersons","initialPersons","e","target","preventDefault","newPhonebook","trim","pre_existing_Contact","find","undefined","window","confirm","newContact","setTimeout","catch","err","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6dc4955.chunk.js","sourcesContent":["const Filter = ({ handleSearchChange, newSearch }) => {\n    return (\n        <div>\n            filter shown with:{\" \"}\n            <input onChange={handleSearchChange} value={newSearch} />\n        </div>\n    );\n};\n\nexport default Filter;\n","const PersonForm = ({\n    handleNameChange,\n    addPerson,\n    handleNumberChange,\n    newName,\n    newNumber,\n}) => {\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                name: <input onChange={handleNameChange} value={newName} />\n            </div>\n            <div>\n                number:{\" \"}\n                <input onChange={handleNumberChange} value={newNumber} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    );\n};\n\nexport default PersonForm;\n","const Person = ({ person, deletePerson }) => {\n    const handleClick = () => deletePerson(person.name, person.id);\n\n    return (\n        <div>\n            <p>\n                {person.name} {person.number}\n            </p>\n            <button onClick={handleClick}>Delete</button>\n        </div>\n    );\n};\n\nconst Persons = ({ personsToShow, deletePerson }) => {\n    return (\n        <div>\n            {personsToShow.map((person) => (\n                <Person\n                    key={person.id}\n                    person={person}\n                    deletePerson={deletePerson}\n                />\n            ))}\n        </div>\n    );\n};\nexport default Persons;\n","const Notification = ({ notification }) => {\n    console.log(notification);\n\n    if (notification !== null) {\n        const notificationStyle = {\n            color: notification.color,\n            backgroundColor: \"lightgray\",\n            fontSize: 20,\n            borderStyle: \"solid\",\n            borderRadius: 5,\n            padding: 10,\n            marginBottom: 10,\n        };\n        return <div style={notificationStyle}>{notification.message}</div>;\n    }\n\n    return null;\n};\n\nexport default Notification;\n","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteOne = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response)\n}\n\nexport default {getAll, create, update, deleteOne}","import React, { useEffect, useState } from \"react\";\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport Notification from \"./components/Notification\";\nimport servicePersons from \"./services/personService\";\n\nconst App = () => {\n    //States\n    const [persons, setPersons] = useState([]);\n    const [newName, setNewName] = useState(\"\");\n    const [newNumber, setNewNumber] = useState(\"\");\n    const [newSearch, setNewSearch] = useState(\"\");\n    const [notification, setNotification] = useState(null);\n\n    //When a state change, the component re-render and need to update the list of persons to show\n    const personsToShow =\n        newSearch === \"\"\n            ? persons\n            : persons.filter((person) =>\n                  person.name.toLowerCase().startsWith(newSearch.toLowerCase())\n              );\n\n    const addPerson = (e) => {\n        e.preventDefault(); //form default behavior\n\n        const newPhonebook = {\n            name: newName.trim(),\n            number: newNumber.trim(),\n        };\n\n        //this function returns the contact if already exist in the database\n        const pre_existing_Contact = persons.find((person) =>\n            person.name.trim().toLowerCase() === newPhonebook.name.toLowerCase()\n                ? person\n                : undefined\n        );\n\n        //if contact exist\n        if (\n            pre_existing_Contact &&\n            window.confirm(\n                `${newPhonebook.name} is already added to the phonebook, do you want to replace the old number with a new one?`\n            )\n        ) {\n            //update number\n            console.log(pre_existing_Contact);\n            servicePersons\n                .update(pre_existing_Contact.id, newPhonebook)\n                .then((newContact) => {\n                    setPersons(\n                        persons.map((person) =>\n                            person.id === newContact.id ? newContact : person\n                        )\n                    );\n                    setNotification({\n                        message: `Updated ${newContact.name} number`,\n                        color: \"green\",\n                    });\n                    setTimeout(() => {\n                        setNotification(null);\n                    }, 5000);\n                })\n                .catch((err) => {\n                    console.log(err);\n                    setNotification({\n                        message: `Information of ${newPhonebook.name} has already been removed from server`,\n                        color: \"red\",\n                    });\n                    setTimeout(() => {\n                        setNotification(null);\n                    }, 5000);\n                });\n            setNewName(\"\");\n            setNewNumber(\"\");\n        }\n\n        //if name not exist\n        else {\n            servicePersons\n                .create(newPhonebook)\n                .then((newContact) => {\n                    setPersons([...persons, newContact]);\n                    setNotification({\n                        message: `Added ${newContact.name}`,\n                        color: \"green\",\n                    });\n                    setTimeout(() => {\n                        setNotification(null);\n                    }, 5000);\n                })\n                .catch((err) => console.log(err));\n\n            setNewName(\"\");\n            setNewNumber(\"\");\n        }\n    };\n\n    //delete person of the database\n    const deletePerson = (name, id) => {\n        if (window.confirm(`Are you sure to delete ${name}?`)) {\n            servicePersons\n                .deleteOne(id)\n                .then(setPersons(persons.filter((person) => person.id !== id)))\n                .catch(console.log(\"server error\"));\n        }\n    };\n\n    //event handlers\n    const handleNameChange = (e) => {\n        setNewName(e.target.value);\n    };\n\n    const handleNumberChange = (e) => {\n        setNewNumber(e.target.value.trim());\n    };\n\n    const handleSearchChange = (e) => {\n        setNewSearch(e.target.value);\n    };\n\n    //fetch data from server\n    useEffect(() => {\n        servicePersons.getAll().then((initialPersons) => {\n            setPersons(initialPersons);\n        });\n    }, []);\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification\n                notification={notification}\n            />\n            <Filter\n                handleSearchChange={handleSearchChange}\n                newSearch={newSearch}\n            />\n\n            <h2>add a new</h2>\n            <PersonForm\n                addPerson={addPerson}\n                handleNameChange={handleNameChange}\n                handleNumberChange={handleNumberChange}\n                newName={newName}\n                newNumber={newNumber}\n            />\n\n            <h2>Numbers</h2>\n            <Persons\n                personsToShow={personsToShow}\n                deletePerson={deletePerson}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport App from './App';\n\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}